import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import Router from 'routers';
import ErrorBoundary from './components/errors/ErrorBoundary';
import Loading from './components/loading';
import { setUser, resetLogin, setIsProfileSubmitted } from 'redux/reducers/login';
import { auth } from 'services/firebase/config';
import { handleError } from 'utils/errorHandler';
import queryRef from 'services/firebase/query';
import { getDocData } from 'utils/format';
import * as localStorage from 'utils/storage';
import { USER_STATUS } from 'constants/options';
import firebaseAuthService from 'services/firebase/auth';
import { UserIsSuspendedError } from 'utils/errors/firebaseError';

const App = props => {
  const { setUser, resetLogin, setIsProfileSubmitted } = props;
  const [authState, setAuthState] = useState({
    isAuthenticate: false,
    initializing: true,
    isSuperAdmin: false,
  });

  const userUnSubscribeRef = useRef(null);

  const logoutHandler = () => {
    firebaseAuthService
      .logout()
      .catch(error => {
        handleError(error);
      })
      .finally(() => {
        setAuthState({
          isAuthenticate: false,
          initializing: false,
        });
      });
  };

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(user => {
      if (!user) {
        userUnSubscribeRef.current && userUnSubscribeRef.current();
        setAuthState({
          isAuthenticate: false,
          initializing: false,
        });
        resetLogin();
        return;
      }
      userUnSubscribeRef.current = queryRef.USER_INFO_BY_ID(user.uid).onSnapshot(
        response => {
          const userInfo = getDocData(response);

          if (userInfo && (userInfo.isSuperAdmin || userInfo.status !== USER_STATUS.suspended)) {
            setUser(userInfo);
            if (!userInfo.isProfileCompleted) {
              setIsProfileSubmitted(userInfo.isProfileCompleted);
            }
            setAuthState({
              isAuthenticate: true,
              initializing: false,
            });
            localStorage.set('lastLoginRole', userInfo.isSuperAdmin ? 'admin' : 'client');
          } else {
            //For suspendedUser, revoke the social login session
            const suspendedError = new UserIsSuspendedError();
            handleError(suspendedError);
            logoutHandler();
          }
        },
        error => {
          //revoke the current sociallogin session if error on getting userInfo
          logoutHandler();
          handleError(error);
        }
      );
    });
    return () => {
      unsubscribe();
    };
  }, [setUser, resetLogin, setIsProfileSubmitted]);

  return (
    <ErrorBoundary>
      {authState.initializing ? <Loading /> : <Router isAuthenticate={authState.isAuthenticate} />}
    </ErrorBoundary>
  );
};

App.propTypes = {
  setUser: PropTypes.func.isRequired,
  resetLogin: PropTypes.func.isRequired,
  setIsProfileSubmitted: PropTypes.func.isRequired,
};

const mapDispatchToProps = dispatch => ({
  setUser: user => dispatch(setUser(user)),
  resetLogin: () => dispatch(resetLogin()),
  setIsProfileSubmitted: status => dispatch(setIsProfileSubmitted(status)),
});
export default connect(null, mapDispatchToProps)(App);